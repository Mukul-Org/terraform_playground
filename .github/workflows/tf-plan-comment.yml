# .github/workflows/tf-plan-comment.yml

name: 'TF Plan Example Fabric Project'

on:
  pull_request:
    types: [opened, reopened]
    paths:
      - 'examples/**/*.tf'
  push:
    branches:
      - main
    paths:
      - 'examples/**/*.tf'
  workflow_dispatch:

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      TF_IN_AUTOMATION: true
      # defaults:
      #   run:
      #     working-directory: $(pwd)
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: List Updated files
        run: |
          URL="https://api.github.com/repos/${GITHUB_REPOSITORY}/pulls/${{ github.event.pull_request.number }}/files"
          FILES=$(curl -s -X GET -G $URL | jq -r '.[] | .filename')
          echo $FILES
        continue-on-error: true

      - id: files
        uses: jitterbit/get-changed-files@v1
        with:
          format: 'json'
        continue-on-error: true

      - name: Get added and modified files
        run: |
          mapfile -d ',' -t added_modified_files < <(printf '%s,' '${{ steps.files.outputs.added_modified }}')
          for added_modified_file in "${added_modified_files[@]}"; do
            export DIR="$(dirname "${added_modified_file}")"
          done
        continue-on-error: true

      - name: Get removed files
        run: |
          readarray -t removed_files <<<"$(jq -r '.[]' <<<'${{ steps.files.outputs.removed }}')"
          for removed_file in ${removed_files[@]}; do
            export DIR="$(dirname "${removed_file}")"
          done
        continue-on-error: true

      # - name: Manual DIR set
      #   run: |
      #     VAR='examples/fabric_project/variables.tf'
      #     export DIR="$(dirname "${VAR}")"

      - name: Print DIR
        run: |
          echo "$DIR"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_version: 0.15.0

      - name: Set environment
        run: |
          echo "GOOGLE_APPLICATION_CREDENTIALS=${GITHUB_WORKSPACE}/.github/workflows/fake-key.json" >> $GITHUB_ENV

      - name: Printing Cred
        run: |
          echo $GOOGLE_APPLICATION_CREDENTIALS # This will print the file path in GOOGLE_APPLICATION_CREDENTIALS variable
          cat $GOOGLE_APPLICATION_CREDENTIALS # This will print the file content
        shell: bash

      - name: Terraform Format
        working-directory: ./$DIR
        id: fmt
        run: terraform fmt -check -recursive
        continue-on-error: true

      - name: Post Format
        if: always() && github.ref != 'refs/heads/master' && (steps.fmt.outcome == 'success' || steps.fmt.outcome == 'failure')
        uses: robburger/terraform-pr-commenter@v1
        with:
          commenter_type: fmt
          commenter_input: ${{ format('{0}{1}', steps.fmt.outputs.stdout, steps.fmt.outputs.stderr) }}
          commenter_exitcode: ${{ steps.fmt.outputs.exitcode }}

      - name: Terraform Init
        working-directory: ./$DIR
        id: init
        run: terraform init

      - name: Post Init
        if: always() && github.ref != 'refs/heads/master' && (steps.init.outcome == 'success' || steps.init.outcome == 'failure')
        uses: robburger/terraform-pr-commenter@v1
        with:
          commenter_type: init
          commenter_input: ${{ format('{0}{1}', steps.init.outputs.stdout, steps.init.outputs.stderr) }}
          commenter_exitcode: ${{ steps.init.outputs.exitcode }}

      - name: Terraform Validate
        working-directory: ./$DIR
        id: validate
        run: terraform validate

      - name: Post Validate
        if: always() && github.ref != 'refs/heads/master' && (steps.validate.outcome == 'success' || steps.validate.outcome == 'failure')
        uses: robburger/terraform-pr-commenter@v1
        with:
          commenter_type: validate
          commenter_input: ${{ format('{0}{1}', steps.validate.outputs.stdout, steps.validate.outputs.stderr) }}
          commenter_exitcode: ${{ steps.validate.outputs.exitcode }}

      - name: Terraform Plan
        working-directory: ./$DIR
        id: plan
        run: terraform plan -out workspace.plan
        env:
          TF_VAR_billing_account: 'ABCD-EFGH-IJKL-MNOP'
          TF_VAR_parent: 'organizations/1234567890'

      - name: Post Plan
        if: always() && github.ref != 'refs/heads/master' && (steps.plan.outcome == 'success' || steps.plan.outcome == 'failure')
        uses: robburger/terraform-pr-commenter@v1
        with:
          commenter_type: plan
          commenter_input: ${{ format('{0}{1}', steps.plan.outputs.stdout, steps.plan.outputs.stderr) }}
          commenter_exitcode: ${{ steps.plan.outputs.exitcode }}